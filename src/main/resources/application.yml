spring:
  application:
    name: nemo

  # 활성 프로필
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  # 파일 업로드 설정 (이미지 파일)
  servlet:
    multipart:
      max-file-size: ${IMAGE_FILE_BYTE:10MB}
      max-request-size: ${IMAGE_REQUEST_BYTE:50MB}

  # MySQL 드라이버
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver

  # MySQL 방언
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        # sql 포매팅 (가독성 향상)
        format_sql: true

  messages:
    basename: validation
    encoding: UTF-8

  kafka:
    bootstrap-servers: ${KAFKA_SERVER:localhost:9092}

    # Producer 설정
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer   # 메시지 키를 바이트로 변환하는 방식
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer   # 메시지 값을 바이트로 변환하는 방식
      compression-type: lz4
      buffer-memory: 33554432
      properties:
        socket.send.buffer.bytes: 102400
        socket.receive.buffer.bytes: 102400

    # Consumer 설정
    consumer:
      bootstrap-servers: ${KAFKA_SERVER:localhost:9092}
      group-id: nemo-group   # Consumer 그룹 ID
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer   # 바이트 키를 String으로 역직렬화
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer   #  바이트 값을 JSON에서 Object로 역직렬화
      auto-offset-reset: earliest   # 새로운 Consumer가 처음 시작할 때 가장 처음 메시지부터 읽기
      properties:
        spring.json.trusted.packages: "kr.ai.nemo"  # JSON 역직렬화 보안 설정
        socket.send.buffer.bytes: 102400
        socket.receive.buffer.bytes: 102400

oauth:
  kakao:
    rest-api-key: ${KAKAO_REST_API_KEY}
    redirect-uri: ${KAKAO_REDIRECT_URI}

jwt:
  secret: ${JWT_SECRET}
  access-token-validity: ${ACCESS_TOKEN_EXPIRATION:3600000}
  refresh-token-validity: ${REFRESH_TOKEN_EXPIRATION:604800000}

server:
  forward-headers-strategy: framework

# 이미지 파일 s3 사용
cloud:
  aws:
    s3:
      bucket: ${BUCKET_NAME}
    credentials:
      access-key: ${CLOUD_AWS_CREDENTIALS_ACCESS_KEY}
      secret-key: ${CLOUD_AWS_CREDENTIALS_SECRET_KEY}
    region:
      static: ${AWS_REGION:ap-northeast-2}

# AI 서버 주소
ai:
  service:
    url: ${AI_SERVICE_URL}
    endpoints:
      group-generate: /ai/v1/groups/information
      group-chatbot:
        group-recommend-freeform: /ai
